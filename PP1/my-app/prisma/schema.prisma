// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int       @id @default(autoincrement())  //different id for each user(primary key), auto-increments
  email     String    @unique //email-needs to be different for all users
  password  String    //password
  firstName String   //users firstname
  lastName  String   users lastname
  avatar    String?  //optional
  phone     String?  //optional
  role Role @default(USER) //roll (if they have admin privileges or not)
  createdAt DateTime  @default(now())  //time it is created
  updatedAt DateTime  @updatedAt  //time it is updated
  codeTemplates CodeTemplate[]  //code templates
  blogPosts    BlogPost[]  //users previous blog posts
  comments     Comment[]  //users previous comments
  reports      InappropriateContentReport[] //reports of users previous blog post or comments
}

model CodeTemplate {
  id        Int       @id @default(autoincrement())   // primary key
  title     String
  description   String    // explanation of the code in this template
  code String		// actual code
  tags      String[]    // List of strings to store tags directly 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  langId  Int       // the programming language this code template uses.
  language  ProgrammingLanguage @relation(fields: [langId], references: [id])

  userId    Int     // the user who created this code template. 
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // blog posts that link to this code template. 
  blogPosts BlogPost[] 	@relation(“BlogTemplates”) // many to many relationship between BlogPosts and CodeTemplates
}

model BlogPost {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  content     String
  tags        String[]  // List of strings to store tags directly 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  codeTemplates CodeTemplate[] 	@relation(“BlogTemplates”)  // many to many relationship between BlogPosts and CodeTemplates
  
  // userId of user who created this BlogPost
  userId      Int
  user        User       @relation(fields: [userId], references: [id])

  comments    Comment[]   // comments made on this blog post
  reports      InappropriateContentReport[] 	//reports made about this blog
  upvotes      Int
  downvotes    Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  //userId of user who made this comment
  userId    Int
  user      User     @relation(fields: [userId], references: [id]) 
  
  // blogPostId of blogpost this comment was made on
  blogPostId Int
  blogPost  BlogPost @relation(fields: [blogPostId], references: [id])
  
  upvotes int 
  downvotes int
  reports      InappropriateContentReport[] //reports made about this comment
}

model InappropriateContentReport {
  id        Int      @id @default(autoincrement()) //Primary key 
  reason    String   //reason for reporting
  createdAt DateTime @default(now())  //report created date
  user      User     @relation(fields: [userId], references: [id]) //user that reported
  userId    Int //Foreign key pointing to the User who submitted the report
  blogPost  BlogPost? @relation(fields: [blogPostId], references: [id]) //optional - was it a blogpost that is being reported
  blogPostId Int? //foreign key to the blog post
  comment   Comment?  @relation(fields: [commentId], references: [id]) //optional-was it a comment being reported
  commentId Int? //foreign key for comment
}

model ProgrammingLanguage {
  id   Int    @id @default(autoincrement()) // Primary key, auto-incremented
  name String @unique //name of the programming language 
  codeTemplates CodeTemplate[] // One-to-many relationship with CodeTemplate, meaning a programming language can be associated with many code templates
}

model Session {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incremented
  token     String   // Unique session token to authenticate the user during the session
  user      User     @relation(fields: [userId], references: [id]) // Relationship to the User model, linking the session to a specific user
  userId    Int      // Foreign key referencing the User model (who the session belongs to)
  createdAt DateTime @default(now()) // Timestamp indicating when the session was created
  expiresAt DateTime // Timestamp indicating when the session will expire
}

enum Role { 
  USER //the role user
  ADMIN //the role admin
}


